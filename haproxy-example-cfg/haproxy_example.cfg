#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
#    log 127.0.0.1  syslog debug

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    log global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend main
#    bind *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#
#    use_backend static          if url_static
#    default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
#backend app
#    balance     roundrobin
#    server  app1 127.0.0.1:5001 check
#    server  app2 127.0.0.1:5002 check
#    server  app3 127.0.0.1:5003 check
#    server  app4 127.0.0.1:5004 check
##Â OpenShift 4

# Workers
#frontend ingress-https
#    bind *:8080
#    default_backend ingress-https
#    mode tcp
#    option tcplog

#backend ingress-https
#    balance source
#    mode tcp
#    server worker0 192.168.100.2:443 check

listen ingress-https-quay-config
    bind 5.9.41.110:8443
    mode tcp
    server config 192.168.100.4:8443 check

# listen ingress-http
#     bind 5.9.41.110:8080
#     mode tcp
#     server psql01 192.168.100.4:80 check
#     server psql02 192.168.100.5:80 check
#     server psql03 192.168.100.6:80 check
#     server psql04 192.168.100.7:80 check

listen stats
    mode http
    bind *:8080
    stats enable
    stats uri /

listen psql
    bind *:5432
    option httpchk
    mode tcp
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    server psql01 192.168.100.4:5432 maxconn 100 check port 8008
    server psql02 192.168.100.5:5432 maxconn 100 check port 8008
    server psql03 192.168.100.6:5432 maxconn 100 check port 8008
    server psql04 192.168.100.7:5432 maxconn 100 check port 8008

listen redis 
     bind *:6379
    mode tcp
 balance first
  option tcp-check
  tcp-check send AUTH\ xjNhAEwkrQzjHFdht9yjXQNWk\r\n
  tcp-check send PING\r\n
  tcp-check expect string +PONG
  tcp-check send info\ replication\r\n
  tcp-check expect string role:master
  tcp-check send QUIT\r\n
  tcp-check expect string +OK
     server redis01 192.168.100.4:6379 check inter 1s
     server redis02 192.168.100.5:6379 check inter 1s
     server redis03 192.168.100.6:6379 check inter 1s
     server redis04 192.168.100.7:6379 check inter 1s

frontend  fe_http 
    bind *:80
    default_backend             be_http
frontend  fe_https 
    mode tcp
    bind *:443
    default_backend             be_https
frontend minio-backend
    mode tcp
    bind *:9000
    default_backend be_minio

frontend clair-backend
    mode tcp
    bind *:6060
    default_backend be_clair

frontend clair-backend-monit
    mode tcp
    bind *:6061
    default_backend be_clair_monit

backend be_http
    balance     roundrobin
    server quay01_http 192.168.100.4:80 check
    server quay02_http 192.168.100.5:80 check
    server quay03_http 192.168.100.6:80 check
    server quay04_http 192.168.100.7:80 check

backend be_https
    mode tcp
    balance     roundrobin
    server quay01_https 192.168.100.4:443 check 
    server quay02_https 192.168.100.5:443 cookie SB check
    server quay03_https 192.168.100.6:443 cookie SC check
    server quay04_https 192.168.100.7:443 cookie SD check

backend be_minio
  mode tcp
  balance     roundrobin
  server minio01 192.168.101.4:9000 check
  server minio02 192.168.101.5:9000 check
  server minio03 192.168.101.6:9000 check
#  server minio04 192.168.101.7:9000 check

backend be_clair
  mode tcp
  balance     roundrobin
  server clair01 192.168.100.4:6060 check
  server clair02 192.168.100.5:6060 check
  server clair03 192.168.100.6:6060 check
  server clair04 192.168.100.7:6060 check

backend be_clair_monit
  mode tcp
  balance     roundrobin
  server clair01 192.168.100.4:6061 check
  server clair02 192.168.100.5:6061 check
  server clair03 192.168.100.6:6061 check
  server clair04 192.168.100.7:6061 check
